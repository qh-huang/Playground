class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        if (k == 1) return matrix[0][0];
        int n = matrix.size();
        vector<int> indexes(n, -1);
        indexes[0] = 0; // k == 1
        int min_ro, min_co, curr_min;
        curr_min = -1;
        for (int i=1; i<k; i++) {
            // iterate through all rows
            // find 1st non-full row
            for (int r=0; r<n; r++) {
                if (indexes[r] < n-1) {
                  min_ro = r;
                  break;
                }
            }
            min_co = indexes[min_ro] + 1;
            curr_min = matrix[min_ro][min_co];
            for (int ro = min_ro + 1; ro < n; ro++) {
                // cout << "ro, co: " << ro << "," << indexes[ro] + 1 << endl;
                if (matrix[ro][indexes[ro]+1] < curr_min) {
                    min_ro = ro;
                    min_co = indexes[ro] + 1;
                    curr_min = matrix[min_ro][min_co];
                }
            }
            indexes[min_ro] = min_co;
            // cout << "curr_min: " << curr_min << endl;
        }
        return curr_min;
    }
};
